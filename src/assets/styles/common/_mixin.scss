// MIXINS

//- Mixin: Fluid Type
///
/// Magic calc + vh to allow text to be fluid between minimum
/// and maximum breakpoints.
/// @param {variable} $min-font-size [12px] - Minimum font size
/// @param {variable} $max-font-size [24px] - Maximum font size
/// @param {variable} $lower-range [420px] - Stop scaling font smaller at this screen resolution
/// @param {variable} $upper-range [900px] - Stop scaling font larger at this screen resolution
/// @example
///   h1 {
///     @include responsive-type(20px, 48px);
///   }
/// @site https://madebymike.com.au/writing/precise-control-responsive-typography/

@mixin fluid-type(
	$min-font-size: 12px,
	$max-font-size: 21px,
	$lower-range: 420px,
	$upper-range: 900px
) {
	font-size: calc(
		#{$min-font-size} + #{(
				($max-font-size / ($max-font-size * 0 + 1)) -
					($min-font-size / ($min-font-size * 0 + 1))
			)} * ((100vw - #{$lower-range}) / #{(
						($upper-range / ($upper-range * 0 + 1)) -
							($lower-range / ($lower-range * 0 + 1))
					)})
	);

	@media screen and (max-width: $lower-range) {
		font-size: $min-font-size;
	}
	@media screen and (min-width: $upper-range) {
		font-size: $max-font-size;
	}
}

/**
 * Calculate the rem from a given
 * pixel size.
 *
 * @param $size
 */
@function rem-calc($size) {
	$remSize: $size / 16;
	@return #{$remSize}rem;
}

/**
 * When an element has a background image,
 * we can use this to size it and center it.
 */
@mixin fit-center-bg-image() {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center center;
}

/**
 * Pseudo-element
 *
 * @param $display
 * @param $pos
 * @param $content
 */
@mixin pseudo($display: block, $pos: absolute, $content: "") {
	content: $content;
	display: $display;
	position: $pos;
}

/**
 * Center-absolute
 *
 * @param $display
 * @param $pos
 * @param $content
 */
@mixin absolute-position($top: 50%, $left: 50%) {
	position: absolute;
	top: $top;
	left: $left;
	transform: translate($left, $top);
}

/**
 * CSS Triangle
 *
 * @param $color
 * @param $direction
 * @param $size
 * @param $position
 * @param $round
 */
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute) {
	@include pseudo($pos: $position);
	width: 0;
	height: 0;

	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round($size / 2.5);
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round($size / 2.5);
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}

// animated underline
@mixin animated-underline() {
	transform: translateZ(0);
	backface-visibility: hidden;
	-moz-osx-font-smoothing: grayscale;
	position: relative;
	overflow: hidden;

	&::before {
		content: "";
		position: absolute;
		width: 100%;
		height: 2px;
		bottom: 0;
		left: 0;
		background-color: currentColor;
		visibility: hidden;
		-webkit-transform: scaleX(0);
		transform: scaleX(0);
		-webkit-transition: all var(--transition-duration-slow)
			var(--transition-easing) 0s;
		transition: all var(--transition-duration-slow) var(--transition-easing) 0s;
	}
}
@mixin animated-underline-hover() {
	&::before {
		visibility: visible;
		-webkit-transform: scaleX(1);
		transform: scaleX(1);
	}
}
